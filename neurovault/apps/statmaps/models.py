from django.db import models
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User

class Study(models.Model):
    name = models.CharField(max_length=200, unique = True, null=False)
    DOI = models.CharField(max_length=200, unique=True, blank=True, null=True, default=None)
    description = models.CharField(max_length=200, blank=True)
    owner = models.ForeignKey(User)
    add_date = models.DateTimeField('date published', auto_now_add=True)
    modify_date = models.DateTimeField('date modified', auto_now=True)

    type_of_design = models.CharField(blank=False, max_length=200, null=False, choices=[('blocked', 'blocked'), ('eventrelated', 'event_related'), ('hybridblockevent', 'hybrid block/event'), ('other', 'other')])
    number_of_imaging_runs = models.IntegerField(null=True, blank=True)
    number_of_experimental_units = models.IntegerField(null=True, blank=True)
    length_of_runs = models.FloatField(null=True, blank=True)
    length_of_blocks = models.FloatField(null=True, blank=True)
    length_of_trials = models.FloatField(null=True, blank=True)
    optimization = models.NullBooleanField(null=True, blank=True)
    optimization_method = models.CharField(max_length=200, null=True, blank=True)
    number_of_subjects = models.IntegerField(null=False, blank=False)
    subject_age_mean = models.FloatField(null=False, blank=False)
    subject_age_min = models.FloatField(null=True, blank=True)
    subject_age_max = models.FloatField(null=True, blank=True)
    handedness = models.CharField(blank=True, max_length=200, null=True, choices=[('right', 'right'), ('left', 'left'), ('both', 'both')])
    proportion_male_subjects = models.FloatField(null=True, blank=True)
    inclusion_exclusion_criteria = models.CharField(max_length=200, null=True, blank=True)
    number_of_rejected_subjects = models.IntegerField(null=True, blank=True)
    group_comparison = models.NullBooleanField(null=False, blank=False)
    group_description = models.CharField(max_length=200, null=True, blank=True)
    scanner_make = models.CharField(max_length=200, null=False, blank=False)
    scanner_model = models.CharField(max_length=200, null=False, blank=False)
    field_strength = models.FloatField(null=False, blank=False)
    pulse_sequence = models.CharField(max_length=200, null=False, blank=False)
    parallel_imaging = models.CharField(max_length=200, null=True, blank=True)
    field_of_view = models.FloatField(null=True, blank=True)
    matrix_size = models.IntegerField(null=True, blank=True)
    slice_thickness = models.FloatField(null=False, blank=False)
    skip_factor = models.FloatField(null=True, blank=True)
    acquisition_orientation = models.CharField(max_length=200, null=True, blank=True)
    order_of_acquisition = models.CharField(blank=True, max_length=200, null=True, choices=[('ascending', 'ascending'), ('descending', 'descending'), ('interleaved', 'interleaved')])
    repetition_time = models.FloatField(null=False, blank=False)
    echo_time = models.FloatField(null=False, blank=False)
    flip_angle = models.FloatField(null=True, blank=True)
    software_package = models.CharField(max_length=200, null=False, blank=False)
    software_version = models.CharField(max_length=200, null=False, blank=False)
    order_of_preprocessing_operations = models.CharField(max_length=200, null=True, blank=True)
    quality_control = models.CharField(max_length=200, null=True, blank=True)
    used_b0_unwarping = models.NullBooleanField(null=True, blank=True)
    b0_unwarping_software = models.CharField(max_length=200, null=True, blank=True)
    used_slice_timing_correction = models.NullBooleanField(null=False, blank=False)
    slice_timing_correction_software = models.CharField(max_length=200, null=True, blank=True)
    used_motion_correction = models.NullBooleanField(null=False, blank=False)
    motion_correction_software = models.CharField(max_length=200, null=True, blank=True)
    motion_correction_reference = models.CharField(max_length=200, null=True, blank=True)
    motion_correction_metric = models.CharField(max_length=200, null=True, blank=True)
    motion_correction_interpolation = models.CharField(max_length=200, null=True, blank=True)
    used_motion_susceptibiity_correction = models.NullBooleanField(null=True, blank=True)
    used_intersubject_registration = models.NullBooleanField(null=False, blank=False)
    intersubject_registration_software = models.CharField(max_length=200, null=True, blank=True)
    intersubject_transformation_type = models.CharField(blank=False, max_length=200, null=False, choices=[('linear', 'linear'), ('nonlinear', 'nonlinear')])
    nonlinear_transform_type = models.CharField(max_length=200, null=True, blank=True)
    transform_similarity_metric = models.CharField(max_length=200, null=True, blank=True)
    interpolation_method = models.CharField(max_length=200, null=True, blank=True)
    object_image_type = models.CharField(max_length=200, null=False, blank=False)
    functional_coregistered_to_structural = models.NullBooleanField(null=True, blank=True)
    functional_coregistration_method = models.CharField(max_length=200, null=True, blank=True)
    coordinate_space = models.CharField(blank=False, max_length=200, null=False, choices=[('mni', 'MNI'), ('talairach', 'Talairach'), ('mni2tal', 'MNI2Tal'), ('other', 'other')])
    target_template_image = models.CharField(max_length=200, null=True, blank=True)
    target_resolution = models.FloatField(null=False, blank=False)
    used_smoothing = models.NullBooleanField(null=False, blank=False)
    smoothing_type = models.CharField(max_length=200, null=False, blank=False)
    smoothing_fwhm = models.FloatField(null=False, blank=False)
    intrasubject_model_type = models.CharField(max_length=200, null=False, blank=False)
    intrasubject_estimation_type = models.CharField(max_length=200, null=False, blank=False)
    intrasubject_modeling_software = models.CharField(max_length=200, null=True, blank=True)
    hemodynamic_response_function = models.CharField(max_length=200, null=True, blank=True)
    used_temporal_derivatives = models.NullBooleanField(null=True, blank=True)
    used_dispersion_derivatives = models.NullBooleanField(null=True, blank=True)
    used_motion_regressors = models.NullBooleanField(null=True, blank=True)
    used_reaction_time_regressor = models.NullBooleanField(null=True, blank=True)
    used_orthogonalization = models.NullBooleanField(null=False, blank=False)
    orthogonalization_description = models.CharField(max_length=200, null=True, blank=True)
    used_high_pass_filter = models.NullBooleanField(null=False, blank=False)
    high_pass_filter_method = models.CharField(max_length=200, null=True, blank=True)
    autocorrelation_model = models.CharField(max_length=200, null=True, blank=True)
    contrast_definition = models.CharField(max_length=200, null=False, blank=False)
    contrast_definition_cogatlas = models.CharField(max_length=200, null=True, blank=True)
    group_model_type = models.CharField(max_length=200, null=False, blank=False)
    group_estimation_type = models.CharField(max_length=200, null=False, blank=False)
    group_modeling_software = models.CharField(max_length=200, null=True, blank=True)
    group_inference_type = models.CharField(blank=False, max_length=200, null=False, choices=[('randommixedeffects', 'random/mixed effects'), ('fixedeffects', 'fixed effects')])
    group_model_multilevel = models.CharField(max_length=200, null=True, blank=True)
    group_repeated_measures = models.NullBooleanField(null=False, blank=False)
    group_repeated_measures_method = models.CharField(max_length=200, null=True, blank=True)
    group_search_volume = models.IntegerField(null=True, blank=True)
    used_multiple_test_correction = models.NullBooleanField(null=False, blank=False)
    multiple_test_correction_type = models.CharField(max_length=200, null=False, blank=False)
    multiple_test_correction_scope = models.CharField(blank=False, max_length=200, null=False, choices=[('voxelwise', 'Voxelwise'), ('clusterbased', 'Cluster-based'), ('other', 'other')])
    multiple_test_correction_type = models.CharField(blank=False, max_length=200, null=False, choices=[('familywiseerror', 'Familywise error'), ('falsediscoveryrate', 'False discovery rate'), ('other', 'other')])
    cluster_forming_threshold = models.CharField(max_length=200, null=False, blank=False)
    corrected_significance_level = models.CharField(max_length=200, null=False, blank=False)

    def get_absolute_url(self):
        return reverse('statmaps:study_details', args=[str(self.id)])
    
    def __unicode__(self):
        return self.name


def upload_to(instance, filename):
    return "statmaps/%s/%s"%(instance.study.name, filename)
    
class StatMap(models.Model):
    study = models.ForeignKey(Study)
    name = models.CharField(max_length=200, null=False, blank=False)
    description = models.CharField(max_length=200, blank=True)
    file = models.FileField(upload_to=upload_to, null=False, blank=False)
    add_date = models.DateTimeField('date published', auto_now_add=True)
    modify_date = models.DateTimeField('date modified', auto_now=True)
    
    def __unicode__(self):
        return self.name
    
    class Meta:
        unique_together = ("study", "name")
